// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String?              @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  sourceDocuments      SourceDocument[]
  documentGraphs       DocumentGraph[]
  topicSpaces          TopicSpace[]
  graphChangeHistories GraphChangeHistory[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SourceDocument {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  documentType DocumentType @default(INPUT_TXT)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  graph       DocumentGraph?
  topicSpaces TopicSpace[]
  tags        Tag[]
}

enum DocumentType {
  INPUT_PDF
  INPUT_TXT
}

model DocumentGraph {
  id        String   @id @default(cuid())
  dataJson  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  sourceDocument   SourceDocument @relation(fields: [sourceDocumentId], references: [id])
  sourceDocumentId String         @unique

  additionalGraphFusionQueues GraphFusionQueue[] @relation("AdditionalGraph")
  // targetGraphFusionQueues GraphFusionQueue[] @relation("TargetGraph")
}

model TopicSpace {
  id              String          @id @default(cuid())
  name            String
  graphData       Json?
  graphDataStatus GraphDataStatus @default(QUEUED)
  description     String?
  image           String?
  star            Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isDeleted       Boolean         @default(false)

  mcpToolIdentifier String?

  sourceDocuments  SourceDocument[]
  admins           User[]
  tags             Tag[]
  activities       Activity[]
  graphFusionQueue GraphFusionQueue[]
}

enum GraphDataStatus {
  QUEUED
  PROCESSING
  CREATED
  CREATION_FAILED
}

model Tag {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicSpaces     TopicSpace[]
  sourceDocuments SourceDocument[]
}

model GraphChangeHistory {
  id          String                @id @default(cuid())
  recordType  GraphChangeRecordType
  recordId    String
  description String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  user                    User                    @relation(fields: [userId], references: [id])
  userId                  String
  nodeLinkChangeHistories NodeLinkChangeHistory[]
}

model NodeLinkChangeHistory {
  id               String                @id @default(cuid())
  changeType       GraphChangeType
  changeEntityType GraphChangeEntityType
  changeEntityId   String
  previousState    Json
  nextState        Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  graphChangeHistory   GraphChangeHistory @relation(fields: [graphChangeHistoryId], references: [id])
  graphChangeHistoryId String
}

enum GraphChangeRecordType {
  DOCUMENT_GRAPH
  TOPIC_SPACE
}

enum GraphChangeType {
  ADD
  REMOVE
  UPDATE
}

enum GraphChangeEntityType {
  NODE
  EDGE
}

model Activity {
  id   String       @id @default(cuid())
  type ActivityType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicSpace   TopicSpace @relation(fields: [topicSpaceId], references: [id])
  topicSpaceId String
}

enum ActivityType {
  CREATED_TOPIC_SPACE
  CREATED_SOURCE_DOCUMENT

  RECEIVED_NEW_DOCUMENT
  RECEIVED_SUGGESTION

  ADD_NEW_DOCUMENT
  DETACHED_DOCUMENT

  APPROVED_NEW_DOCUMENT
  APPROVED_SUGGESTION
}

model GraphFusionQueue {
  id     String          @id @default(cuid())
  status GraphDataStatus @default(QUEUED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicSpace   TopicSpace @relation(fields: [topicSpaceId], references: [id])
  topicSpaceId String

  additionalGraph   DocumentGraph @relation("AdditionalGraph", fields: [additionalGraphId], references: [id])
  additionalGraphId String
  // targetGraph DocumentGraph @relation("TargetGraph", fields: [targetGraphId], references: [id])
  // targetGraphId String
}
