// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  sourceDocuments SourceDocument[]
  documentGraphs  DocumentGraph[]
  topicSpaces     TopicSpace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SourceDocument {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  graph       DocumentGraph?
  topicSpaces TopicSpace[]
  tags        Tag[]
}

model DocumentGraph {
  id        String   @id @default(cuid())
  dataJson  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  sourceDocument   SourceDocument @relation(fields: [sourceDocumentId], references: [id])
  sourceDocumentId String         @unique
}

model TopicSpace {
  id              String          @id @default(cuid())
  name            String
  graphData       Json?
  graphDataStatus GraphDataStatus @default(PROCESSING)
  description     String?
  image           String?
  star            Int             @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sourceDocuments SourceDocument[]
  admins          User[]
  tags            Tag[]
  activities      Activity[]
}

enum GraphDataStatus {
  PROCESSING
  CREATED
  CREATION_FAILED
}

model Tag {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicSpaces     TopicSpace[]
  sourceDocuments SourceDocument[]
}

model Activity {
  id   String       @id @default(cuid())
  type ActivityType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicSpace   TopicSpace @relation(fields: [topicSpaceId], references: [id])
  topicSpaceId String
}

enum ActivityType {
  CREATED_TOPIC_SPACE
  CREATED_SOURCE_DOCUMENT

  RECEIVED_NEW_DOCUMENT
  RECEIVED_SUGGESTION

  ADD_NEW_DOCUMENT
  DETACHED_DOCUMENT

  APPROVED_NEW_DOCUMENT
  APPROVED_SUGGESTION
}
