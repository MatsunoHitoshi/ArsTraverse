// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String?              @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  sourceDocuments      SourceDocument[]
  documentGraphs       DocumentGraph[]
  topicSpaces          TopicSpace[]
  graphChangeHistories GraphChangeHistory[]
  
  // ワークスペース関連
  workspaces      Workspace[]          @relation("WorkspaceCurator")
  collaboratedWorkspaces Workspace[]        @relation("WorkspaceCollaborators")
  writingHistoryChanges WritingHistory[]    @relation("WritingHistoryChangedBy")
  
  // 注釈関連
  annotations     Annotation[]
  annotationHistories AnnotationHistory[]
  discussionParticipations AnnotationDiscussion[] @relation("DiscussionParticipants")
  
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SourceDocument {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  documentType DocumentType @default(INPUT_TXT)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  graph       DocumentGraph?
  topicSpaces TopicSpace[]
  tags        Tag[]
  
  // 注釈から統合された場合の関連
  annotations Annotation[]
}

enum DocumentType {
  INPUT_PDF
  INPUT_TXT
}

model DocumentGraph {
  id        String   @id @default(cuid())
  dataJson  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  sourceDocument   SourceDocument @relation(fields: [sourceDocumentId], references: [id])
  sourceDocumentId String         @unique

  graphNodes GraphNode[] @relation("DocumentGraphNodes")
  graphRelationships GraphRelationship[] @relation("DocumentGraphEdges")

  additionalGraphFusionQueues GraphFusionQueue[] @relation("AdditionalGraph")
  // targetGraphFusionQueues GraphFusionQueue[] @relation("TargetGraph")
}

model GraphNode {
  id            String                       @id @default(cuid())
  name          String
  label         String
  properties    Json                         @default("{}")
  nameEmbedding Unsupported("vector(384)")?
  transEEmbedding Unsupported("vector(50)")?

  documentGraph   DocumentGraph? @relation("DocumentGraphNodes", fields: [documentGraphId], references: [id])
  documentGraphId String?

  topicSpace   TopicSpace? @relation("TopicSpaceNodes", fields: [topicSpaceId], references: [id])
  topicSpaceId String?

  relationshipsFrom GraphRelationship[] @relation("fromNode")
  relationshipsTo   GraphRelationship[] @relation("toNode")

  // 注釈関連
  annotations       Annotation[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model GraphRelationship {
  id         String @id @default(cuid())
  type       String
  properties Json   @default("{}")

  documentGraph   DocumentGraph? @relation("DocumentGraphEdges", fields: [documentGraphId], references: [id])
  documentGraphId String?
  transEEmbedding Unsupported("vector(50)")?

  topicSpace   TopicSpace? @relation("TopicSpaceEdges", fields: [topicSpaceId], references: [id])
  topicSpaceId String?

  fromNode   GraphNode @relation("fromNode", fields: [fromNodeId], references: [id], onDelete: Cascade)
  fromNodeId String
  toNode     GraphNode @relation("toNode", fields: [toNodeId], references: [id], onDelete: Cascade)
  toNodeId   String

  // 注釈関連
  annotations       Annotation[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model TopicSpace {
  id              String          @id @default(cuid())
  name            String
  graphData       Json?
  graphDataStatus GraphDataStatus @default(QUEUED)
  description     String?
  image           String?
  star            Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isDeleted       Boolean         @default(false)

  mcpToolIdentifier String?

  graphNodes GraphNode[] @relation("TopicSpaceNodes")
  graphRelationships GraphRelationship[] @relation("TopicSpaceEdges")

  sourceDocuments  SourceDocument[]
  admins           User[]
  tags             Tag[]
  activities       Activity[]
  graphFusionQueue GraphFusionQueue[]
  graphEmbeddingQueues GraphEmbeddingQueue[]
  
  // ワークスペースから参照される
  referencedByWorkspaces Workspace[] @relation("WorkspaceReferencedTopicSpaces")
}

enum GraphDataStatus {
  QUEUED
  PROCESSING
  CREATED
  CREATION_FAILED
}

model Tag {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicSpaces     TopicSpace[]
  sourceDocuments SourceDocument[]
  workspaces      Workspace[] @relation("WorkspaceTags")
  discussionTags  AnnotationDiscussion[] @relation("DiscussionTags")
}

model GraphChangeHistory {
  id          String                @id @default(cuid())
  recordType  GraphChangeRecordType
  recordId    String
  description String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  user                    User                    @relation(fields: [userId], references: [id])
  userId                  String
  nodeLinkChangeHistories NodeLinkChangeHistory[]
}

model NodeLinkChangeHistory {
  id               String                @id @default(cuid())
  changeType       GraphChangeType
  changeEntityType GraphChangeEntityType
  changeEntityId   String
  previousState    Json
  nextState        Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  graphChangeHistory   GraphChangeHistory @relation(fields: [graphChangeHistoryId], references: [id])
  graphChangeHistoryId String
}

enum GraphChangeRecordType {
  DOCUMENT_GRAPH
  TOPIC_SPACE
}

enum GraphChangeType {
  ADD
  REMOVE
  UPDATE
}

enum GraphChangeEntityType {
  NODE
  EDGE
}

model Activity {
  id   String       @id @default(cuid())
  type ActivityType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicSpace   TopicSpace @relation(fields: [topicSpaceId], references: [id])
  topicSpaceId String
}

enum ActivityType {
  CREATED_TOPIC_SPACE
  CREATED_SOURCE_DOCUMENT

  RECEIVED_NEW_DOCUMENT
  RECEIVED_SUGGESTION

  ADD_NEW_DOCUMENT
  DETACHED_DOCUMENT

  APPROVED_NEW_DOCUMENT
  APPROVED_SUGGESTION
}

model GraphFusionQueue {
  id     String          @id @default(cuid())
  status GraphDataStatus @default(QUEUED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicSpace   TopicSpace @relation(fields: [topicSpaceId], references: [id])
  topicSpaceId String

  additionalGraph   DocumentGraph @relation("AdditionalGraph", fields: [additionalGraphId], references: [id])
  additionalGraphId String
  // targetGraph DocumentGraph @relation("TargetGraph", fields: [targetGraphId], references: [id])
  // targetGraphId String
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model GraphEmbeddingQueue {
  id           String    @id @default(cuid())
  
  status       JobStatus @default(PENDING)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  startedAt    DateTime?
  completedAt  DateTime?
  error        String?   @db.Text
  processedEpochs Int?      @default(0)
  modelStatePath  String?

  topicSpace TopicSpace @relation(fields: [topicSpaceId], references: [id], onDelete: Cascade)
  topicSpaceId String


  @@index([status])
  @@index([topicSpaceId])
}

// キュレーターがトピックについての情報を参照しながら文章を執筆できるワークスペース
model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // ワークスペースの状態
  status      WorkspaceStatus @default(DRAFT)
  
  // 執筆中の文章内容
  content     Json?
  
  // 参照しているトピックスペース
  referencedTopicSpaces TopicSpace[] @relation("WorkspaceReferencedTopicSpaces")
  
  // ワークスペースの所有者（キュレーター）
  user     User     @relation("WorkspaceCurator", fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  
  // 共同編集者
  collaborators User[] @relation("WorkspaceCollaborators")
  
  // ワークスペースのタグ
  tags        Tag[]   @relation("WorkspaceTags")
  
  // 執筆履歴
  writingHistory WritingHistory[]
  
  // 作成・更新日時
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  
  @@index([userId])
  @@index([status])
  @@index([isDeleted])
}

// ワークスペースの状態
enum WorkspaceStatus {
  DRAFT       // 下書き
  IN_PROGRESS // 執筆中
  REVIEW      // レビュー中
  PUBLISHED   // 公開済み
  ARCHIVED    // アーカイブ
}

// 執筆履歴
model WritingHistory {
  id          String   @id @default(cuid())
  // どのワークスペースの履歴か
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  // 変更前の内容
  previousContent Json?
  // 変更後の内容
  currentContent  Json?
  // 変更の説明
  changeDescription String?
  // 変更を行ったユーザー
  changedBy    User     @relation("WritingHistoryChangedBy", fields: [changedById], references: [id])
  changedById  String
  // 変更日時
  createdAt   DateTime @default(now())
  
  @@index([workspaceId])
  @@index([changedById])
  @@index([createdAt])
}

// 注釈機能
model Annotation {
  id          String   @id @default(cuid())
  content     Json?   // 注釈の内容（Markdown対応）
  type        AnnotationType @default(COMMENT) // 注釈の種類
  
  // 対象となるGraphNodeまたはGraphRelationship
  targetNode        GraphNode?        @relation(fields: [targetNodeId], references: [id])
  targetNodeId      String?
  targetRelationship GraphRelationship? @relation(fields: [targetRelationshipId], references: [id])
  targetRelationshipId String?
  
  // 作成者
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  
  // Thread機能のための親子関係
  parentAnnotation   Annotation?  @relation("AnnotationThread", fields: [parentAnnotationId], references: [id])
  parentAnnotationId String?
  childAnnotations  Annotation[] @relation("AnnotationThread")
  
  // 履歴管理
  histories         AnnotationHistory[]
  
  // 議論管理
  rootDiscussions   AnnotationDiscussion[]
  
  // 知識グラフ統合用（注釈をSourceDocumentとして扱う場合）
  sourceDocument   SourceDocument? @relation(fields: [sourceDocumentId], references: [id])
  sourceDocumentId String?
  
  // 作成・更新日時
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  
  // インデックス
  @@index([targetNodeId])
  @@index([targetRelationshipId])
  @@index([authorId])
  @@index([parentAnnotationId])
  @@index([sourceDocumentId])
  @@index([createdAt])
}

// 注釈の種類
enum AnnotationType {
  COMMENT     // 一般的なコメント・説明
  INTERPRETATION // 解釈・分析
  QUESTION    // 質問
  CLARIFICATION // 補足・説明
  CRITICISM   // 批評・指摘
  SUPPORT     // 支持・同意
}

// 注釈履歴管理
model AnnotationHistory {
  id          String   @id @default(cuid())
  
  // 対象の注釈
  annotation  Annotation @relation(fields: [annotationId], references: [id], onDelete: Cascade)
  annotationId String
  
  // 変更の種類
  changeType  AnnotationChangeType
  
  // 変更内容
  previousContent Json? // 変更前の内容
  currentContent  Json? // 変更後の内容
  previousType    AnnotationType? // 変更前のタイプ
  currentType     AnnotationType? // 変更後のタイプ
  
  // 変更理由・コメント
  changeReason    String?
  changeComment   String?
  
  // 変更者
  changedBy       User     @relation(fields: [changedById], references: [id])
  changedById     String
  
  // 変更日時
  createdAt       DateTime @default(now())
  
  // インデックス
  @@index([annotationId])
  @@index([changedById])
  @@index([createdAt])
}

// 注釈変更の種類
enum AnnotationChangeType {
  CREATED     // 作成
  UPDATED     // 更新
  DELETED     // 削除
  RESTORED    // 復元
  TYPE_CHANGED // タイプ変更
}

// 注釈議論管理
model AnnotationDiscussion {
  id          String   @id @default(cuid())
  
  // 議論のタイトル・概要
  title       String?
  description String?
  
  // 議論の状態
  status      DiscussionStatus @default(ACTIVE)
  
  // 関連する注釈（議論の中心となる注釈）
  rootAnnotation   Annotation @relation(fields: [rootAnnotationId], references: [id])
  rootAnnotationId String
  
  // 議論の参加者
  participants User[] @relation("DiscussionParticipants")
  
  // 議論のタグ
  tags         Tag[]  @relation("DiscussionTags")
  
  // 作成・更新日時
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([rootAnnotationId])
  @@index([status])
}

// 議論の状態
enum DiscussionStatus {
  ACTIVE      // 進行中
  RESOLVED    // 解決済み
  ARCHIVED    // アーカイブ
  CONTROVERSIAL // 論争中
}
